Context用于简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等文件相关操作,可能涉及多个API调用
对服务器传入的请求应该创建上下文，而服务器的传输调用应该接受上下文，他们之间的函数调用链必须传递上下文,或者使用WithCancel，WithDeadline，WithTimeout，WithValue创建的派生上下文,当一个上下文被取消时,他派生的所有上下文也被取消。

Context接口：
  context.Context是一个接口,该接口定义了四个需要实现的方法,
type Context interface {
    Deadline() (deadline time.Time, ok bool)//截止时间
    Done() <-chan struct{}   // 取消完成通道
    Err() error   // 错误
    Value(key interface{}) interface{}
}

批注： 
   ·Deadline方法需要返回当前context被取消的时间,即完成工作的截止时间
   ·Done方法需要返回一个Channel,该通道会在当前工作完成或者上下文被取消之后关闭,多次调用Done方法会返回同一个Channel。
   ·Err 方法会返回当前Context结束的原因,他只会在Done返回的Channel被关闭时才会返回非空的值：
    1）如果当前Context被取消就会返回Canceled错误
     2）如果当前Context超时就会返回DeadlineExceeded错误；

   ·Value 方法会从Context中返回键值对应的值，对于同一个上下文来说，多次调用Value并传入相同的Key会返回相同的结果，该方法仅用于 传递跨API和进程间跟请求域的数据

-------------------------------------------------------------
Background() TODO()
GO内置两个函数,Background() 返回一个实现了context接口的background
TODO 返回一个实现了context接口的todo 
代码中最开始都是以这两个内置的上下文对象作为最顶层的partent context，衍生出更多的子上下文对象。

·Background() 主要用于main函数，初始化以及测试代码中,作为Context这个树结构的最顶层的Context也是根context
·TODO() 不明确使用声明context的时候可以额使用这个，
 background和todo本质上 都是empty结构体类型,是一个不被取消，无截止时间，不携带任何值的context。




-----------------------------------------------------------
with 函数
· WithCancel
    func WithCancel(parent Context) (ctx Context, cancel CancelFunc)

    该函数返回待用Done通道的父节点的副本,当调用返回的cancel函数,或关闭父上下文的Done通道时，将关闭返回上下文的Done通道。
c1.go

·WithDeadine
   func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)
   context.WithDeadline(context.Background(), d)得到一个上下文（ctx）和一个取消函数（cancel）

  返回上下文的副本,并将deadline调整为不迟于d，如果父上下文的deadline早于d，则withdeadline(parent,d)在语义上等同于父上下文,当截至日过期时，当调用 返回的cancel函数时,或者当父上下问的Done通道关闭时,返回上下文的Done通道将被关闭,以最先发生的情况为准。
  取消此上下文，将释放与其关联的资源，因此代码应该在此上下文中运行的操作,完成后立即调用cancel。

c2.go
-----------------------------------------------------------
WithTimeout
   func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

    WithTimeout返回WithDeadline(parent, time.Now().Add(timeout))。
    取消此上下文,将释放与其相关的资源,因此代码应该在上下文中运行的操作完成后立即调用cancel,通常用于数据库或者网络连接的超时控制，

c3.go
----------------------------------------------------
WithValue
可以将请求作用域的数据与Context对象建立关系
func WithValue(parent Context, key, val interface{}) Context
    返回父节点的副本，其中key的关联值为value
仅对API和进程间传递请求域的数据使用上下文值，而不是使用它来传递可选参数给函数。
    注： 所提供的键必须是可比较的,并且不应该是string类型或其他内置类型,以避免使用上下文在包之间发生冲突,withvalue用户应该为键定义类型。为了避免在分配给interface{}时进行分配，上下文键通常具有具体类型struct{}。或者，导出的上下文关键变量的静态类型应该是指针或接口。
    


-----------------------------------------------------------
注：
   ·推荐以参数的形式显示传递context
   ·以context作为参数的方法，应当把context作为第一个参数
   ·给一个函数传递context时，不需要传递nil，位置情况下使用context.TODO()
   ·context的value相关方法应该传递请求域的必要数据,不应该用于传递可选参数
   ·context是线程安全的。可以放心在多个goroutine中传递

