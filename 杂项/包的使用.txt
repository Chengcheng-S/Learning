

包————>文件目录
包名和目录名尽量一致

定义方法时，首字母大写则是公共变量，可以被其他的包所调用


同一个包下的package声明要一致
声明格式: package name

包名为main的包为应用程序的入口，其他包不能使用，主函数的包必须定义成main


包可以嵌套，定义包时要去GO下的src定义，方便导包

包的引用： 
     import package
import导入时，会从go的安装目录 和gopath环境变量设置的目录中检索src/package来导入，不存在则导入失败


关于包的使用：
	1、一个目录下的统计文件归属一个包，package的声明要一致
	2、package声明的包和对应的目录名可以不一致，但习惯上还是写成一致

	3、包可以嵌套
	4、同包下的函数不需要导包，可以直接使用
	5、main包，main()函数所在的包，其他包不能使用更不能定义
	6、导包的时候路径要从src下写
	7、给包起别名 如 import"p1  package"  p1.func(）
	8、.操作，导包时在报名前加 . 使用其下的方法时可以省略包名

	9、_操作，仅仅需要导入包时执行init函数，并不需要其他函数等资源，则可以在导入包时匿名导入
	import  _"l_mypackage/utils"


init() 包初始化
 导包时存在init() 函数 先执行init函数
 init() 函数不能有返回值，也不能有参数

	init 和main函数的区别
   定义时没有参数，没有返回值，该函数只能用于go程序自动调用，不能被引用
  不同点： init可以应用于任意包中，并且重复定义多个，而main函数只能用于main包中，且只能定义一个

两个函数的执行顺序： 
	main包中的go文件默认总是会被执行
	对同一个go文件的init()调用顺序时从下而下的
	同一个包下有多个init函数，执行时先安装首字母顺序排序然后在依次执行

	不同包下则是按照主函数调用包的顺序来执行init函数
	
	多个package互相依赖，最后依赖的最先被初始化。如：导入顺序为 mian a-b-c-d  执行顺序则为  d-c-b-a-main
	避免循环import， 一个包被其他多个包import，但只能被初始化一次
