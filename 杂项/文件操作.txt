隶属 os包

FileInfo: 文件信息
	Interface
		Name() 文件名
		Size() 文件大小   单位为字节
		isDir()  是否为目录
		ModTime() 修改时间
		Mode()  权限
		Sys()
fileinfo,err:=os.Stat("path")

获取父级目录：
	// 获取file的父级目录
	fmt.Println("获取父级目录",path.Join(file_name,".."))


创建文件夹：
// 创建目录 // 路径，权限
	errs:= os.Mkdir("g:/goobject/面向对象/文件操作/创目录", os.ModePerm)
	if errs != nil {
		fmt.Println("err", errs)
		return
	}
	fmt.Println("创建目录成功")
}

os.Mkdir 只能创建一层目录
os.MKdirALL（） 可以创建多层目录


// // 创建文件Create 采用模式0666，任何人可读写，不可执行，创建一个名为name的文件，如果文件已经存在则会截断它（重置为空文件）
	file_name,err1:=os.Create("g:/goobject/面向对象/文件操作/创了个文件.go")  // 创建绝对路径文件

// 创建相对路径的文件 是以工程为父级目录创建的



***********************************************************

当前程序打开文件和指定文件建立连接


文件的打开
	os.open("file_name") 打开方式为只读

	os.OpenFile(args) 
	arg_1: 文件名 ；  
	arg_2: 文件打开方式 
	arg_3: 文件不存在时创建文件，需要指定权限

文件的打开方式： const
// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.
	O_RDONLY int = syscall.O_RDONLY // open the file read-only.
	O_WRONLY int = syscall.O_WRONLY // open the file write-only.
	O_RDWR   int = syscall.O_RDWR   // open the file read-write.
	// The remaining values may be or'ed in to control behavior.
	O_APPEND int = syscall.O_APPEND // append data to the file when writing.
	O_CREATE int = syscall.O_CREAT  // create a new file if none exists.
	O_EXCL   int = syscall.O_EXCL   // used with O_CREATE, file must not exist.
	O_SYNC   int = syscall.O_SYNC   // open for synchronous I/O.
	O_TRUNC  int = syscall.O_TRUNC  // truncate regular writable file when opened.



***********************************************************
文件关闭

程序很文件之间的连接关闭
file1.Close()


文件删除
err:= os.Remove(name)

不经过回收站直接回收，
RemoveAll 删除文件中的所有文件
Remove  删除空文件/目录











