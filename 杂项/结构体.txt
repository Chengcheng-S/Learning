存储同一类型的数据，但在结构体中可以为不同项定义不同的数据类型   值类型数据

由一系列具有相同数据类型和不用数据类型的数据组成的数据集合

通过struct来实现面向对象，定义自己的类型

结构体定义： 
    type 类型名 struct{
    字段名 字段类型
    字段名 字段类型
     ...... 
}
类型名： 标识自定义结构体的名称，在同一个包内不能重复
字段名： 表示结构体字段名，结构体中的字段名必须唯一
字段类型： 表示结构字体的具体类型

初始化的四种方法
1)p1:=person{.......}
2)p2:=person
p2.name="" .....
3)p3:=person{
   name:'',
   age:"",
   sex:'',  
}

4) p4:=person{}
p4.name=""
p4.age=..
结构体实例化：
    var 结构体实例 结构体类型
    

go语言中可以使用type关键字来定义自定义类型
自定义类型是定义一个全新的类型，可以通过struct定义 eg： type name int  将name 定义为int类型

类型别名： 
type byte=uint8
type rune =int32

创建指针结构体类型
new关键字对结构体进行实例化，得到结构体的地址
var p2=new(person)

取结构体的地址实例化：
使用&对结构体进行取地址操作，相当于对该结构体类型进行了一次new的实例化操作
p3:=&person()


通过指针 new() 不是nil，指向新分配的类型空间，里面存储零值

匿名结构体： 在创建匿名结构体时，同时创建对象
匿名字段：一个结构体一的字段没有字段名

定义方式 s2:=struct{字段}{赋值}

匿名字段： type student{string  int } 匿名字段，默认使用数据类型作为名字，且匿名字段不可以重复

提升字段： 结构体中属于匿名结构体的字段

GOlang中的结构体嵌套：
1、模拟继承性 is——> a
	type A struct{ filed}   // A 中可以直接访问B中的字段
        type B struct{A//把A当作匿名字段处理}
2、模拟聚合关系  has——> a 
	type C struct{filed}
	type D struct{c C// 聚合关系}


​	



结构体转map
   Json序列化方式  值类型数据————》float64

反射：
