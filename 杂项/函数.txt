定义： 
func 函数名(参数1，参数2)(返回值1，返回值n){
函数体
}


调用 有返回值的函数时，可以不接收其返回值

参数类型简写： 函数的额参数中如果相邻变量的类型相同，则可以省略类型
可变参数: 指函数的参数数量不固定，看么一在参数后加...来标识   // 可变参数通常作为函数的最后一个参数

使用命名返回值return后边可以省略

固定参数与可变参数搭配时，可变参数要放在固定参数的后边
本质上函数的可变参数是通过切片实现的


在一个命名的函数中不能够在声明命名函数，可以定义匿名函数


多返回值 ： 必须用()将所有的返回值包裹起来
定义函数时可以给返回值命名，并在函数体中直接使用这些变量

eg：func calc(x,y int) (sum，sub,int){sum=x+y sub=x-y return}

全局变量;定义在函数外部，在整个程序的运行周期内有效

局部变量：函数定义的变量无法在该函数之外使用 // 局部变量和全局变量重名，优先访问局部变量


函数类型和变量： 
    定义函数类型： type calculation func(int,int)int

函数可以作为参数的类型
func f() int{ return 1}

func f1(x func int){return 1}

函数可以作为返回值类型
func f2(x func()int)func(){ }




defer
defer把它后边的语句延迟到函数即将返回的时候在执行
一个函数中可以有多个defer语句，多个defer语句按照先进后出的顺序延迟执行 last in first out  LIFO
defer多用于函数结束之前释放资源

panic函数用于引发恐慌，导致程序中断执行
recover 用于恢复程序的执行，语法上要求在defer中执行

1）当外围函数中的语句正常执行完毕时，只有其中所有的延迟函数都执行完毕，外围函数才会使真正的结束执行。

2）当执行外围函数中的return语句时，只有其中所有的延迟函数都执行完毕之后，外围函数才会这正返回
3）当外围函数中的代码运行引发恐慌的时候，只有其中所有的延迟函数都执行完毕之后，该运行时恐慌才会真正扩展至调用函数

匿名函数： 

func main(){

    // 函数内部不能直接声明命名函数
    // 如果只是调用一次的函数，可以简写琤立即执行的函数
    func(x,y int)(sum int) {
    	sum=x+y
    	fmt.Printf("sum is %d\n",sum)
    	return sum
    }(1,5)
}
1、匿名函数作为另一个函数的参数，回调函数
2、将匿名函数作为另一个函数的返回值，可以形成闭包结构


闭包：
闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，闭包=函数+引用环境

一个外层函数中，有内层函数，该内层函数中，会操作外层函数的局部变量(外层函数中的参数，或者外层函数中直接定义的变量)，并且该外层函数的返回值就是这个内层函数，这个内层函数和外层函数的局部变量，称之为闭包

闭包中局部变量的生命周期会发生变化，正常的局部变量随着函数调用而创建。随着函数销毁而销毁
但是闭包结构中的外层函数的局部变量并不会随着外层函数的结束而销毁，因为内层函数要继续使用


递归函数： 一个函数自己调用自己，递归函数要有一个出口，逐渐向出口靠近

函数的数据类型： 
    函数加() 进行调用  a=func1  //把函数func1 赋值给a
golang的数据类型：
      数值类型：整数、浮点 进行运算操作
      字符串：可以获取单个字符，截取字符串，遍历，strings包下的函数请求
      数组、切片、map： 存储数据、修改数据、获取数据、遍历数据
       函数：加（） 进行调用
注： 1）函数作为一种符合数据类型，可以看作是一种符合的变量。   2）函数名(): 函数进行调用，函数中的代码全部执行，然后将return的结果返回给调用出。
     3）函数名：指向函数体的内存地址



高阶函数：
    将一个函数作为另一个函数的参数
    fun1(),fun2() 将fun1() 函数作为fun2()函数的参数
    fun2() 称为高阶函数，接受一个函数作为参数的函数
    fun1() 称为回调函数，作为另一个函数的参数




函数参数为空接口类型，则表示可以接收任意类型的参数
func name( age interface{}){
}
        