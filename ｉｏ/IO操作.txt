golang 中的 I/O操作
	输入输出操作，i为 input  o为output，用于读或者写操作，是数据通信的通道

```
os.Stdin：标准输入的文件实例，类型为*File
os.Stdout：标准输出的文件实例，类型为*File
os.Stderr：标准错误输出的文件实例，类型为*File
```



隶属IO 包
	interface
文件读取：
	reader 接口：    
	 

	 read(p[]byte) (n int,error) // 返回值为读取的长度和错误
	step1、打开文件
	file，error:=os.Open(path//filename)
	step3、 关闭文件 
	defer file.Close()
	step2、 读取数据
	
	 // 定义一个切片，存储读取的数据
	bs:=make([]byte,size,length) 
	n,err:=flie.Read()
	if err!={
	fmt.Println(err)
	}
	fmt.Println(n,string(bs)
	
	******************************
	可以用循环的方式读取文件内容
	for{
	n,err:=file.Read(bs)
	if n==0||err==io.EOF{ //EOF is the error returned by Read when no more input is available
 		fmt.Println("读取到了文件的末尾")
		break
	}
	fmt.Println(string(bs[:n]))	
	}



***********************************************************
写操作：
openfile(name,文件权限(读/写/只读/只写),)


 打开文件 
     file,err:=os.Opnefile(file_name,os.O_CREATE|os.O_WRONL,os.ModePerm)
写入数据
bs:= []byte{1，1，1，1，1，1，1，2}
n,err:=file.write(bs[:2])// 可以写入切片中的一部分

n1,err1:=file.writestring(string)
fmt.Println(n1)

关闭文件
file.Close()

WriteAt() 从指定的位置开始写
ReadAt()  从指定位置开始读

***********************************************************
文件的复制
一 ： 函数式操作 


二： int64,error:=io.Copy(写的对象,读的对象)

三： ioutil 下的读写操作方法  一次性读写，不适合较大的文件，文件较大时容易溢出

***********************************************************
Seek 设置读取的偏移量
seek(offset innt64,whence int)(int64,error)设置光标的指针

file.Seek(offset int64,whence int)(int64,error)
	arg_1: 偏移量
	arg_2: 如何设置 io.SeekStart   = 0 // seek relative to the origin of the file  相对于文件开始
					io.SeekCurrent = 1 // seek relative to the current offset 相对于当前的偏移量
					io.SeekEnd     = 2 // seek relative to the end  相对于末尾


step1、先读取临时文件中的数据，然后在seek
step2、 设置读写的位置
step3、 模拟断点  
seek_断点续传.go



***********************************************************bufio 缓冲区.go  // bufio高校缓冲区.go
***********************************************************


ioutil
	ReadFile()
	writefile 写操作 文件不存在时创建文件，所写的内容会覆盖文件之前的内容
	TempDir 临时文件夹   TempFile 临时文件
