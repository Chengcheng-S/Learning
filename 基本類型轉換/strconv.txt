golang 中的strconv 实现了基本数据类型和器字符串表示的相互转换

string与int类型转换： int:=strconv.Atoi(string)

int——> string     string:=strconv.Itoa(int)


Parse系列函数：
   用于转换字符串给定类型的值：

   1）bool,err:=ParseBool(string) 返回字符串表示的bool值，接收1、0、t、f、T、F、true、flase、True、False、TRUE、FALSE


```go
2)int,err:=ParseInt(str,base int  bitSize int)
返回字符串表示的整数值，接收正负号
base指定进制(2到36)，如果base为0，则会从字符串前置判断，"0x"16进制,"0"8进制,否则为10进制
bitSize 指定结果必须能无一处赋值的整数类型，0、8，16，32、64分别代表int int8 int16 int32  int64
如果语法有误：err.Error = ErrSyntax
如果结果超出类型范围err.Error = ErrRange

3）n,err；=ParseUnit(str,base,bitSize) 类似于ParseInt，但不接受正负号

4）float,err:=ParseFolat(str,bitSize)
  解析一个表示浮点数的字符串并返回其值
  bitSize指定了期望的接收类型，32 float32，64，float64
```

Format系列函数： 
      Format系列函数实现了将给定的数据格式化为string类型数据的功能
     

```go
 1)str:=FormatBool(bool) 根据bool返回true/false
 2)str:=FormatInt(int,base) 返回i的base进制字符串表示(base 2——36),结果中会使用a-z表示大于10的数字
 3)str:=FormatUint(int,base)返回无符号的整数版本
 4)str:=FormatFloat(float,fmt,prec,bitSize)
 bitSize表示f的来源类型(32,64)会根据此进行舍入
 fmt表示格式：1、'f'(-ddd.dddd) 
              2、'b'(-ddddp+-ddd,指数为二进制)
              3、'e'(-d.dddde+-dd,十进制指数)
```
 		  4、'E'(-d.dddE-+dd,十进制指数)
		  5、'g'(指数很大时用'e'格式,否则'f'格式)
		  6、'G'(指数很大时用E格式，否则f格式)



​    

     prec控制精度(排除指数部分)对’f’、’e’、’E’，它表示小数点后的数字个数；对’g’、’G’，它控制总的数字个数。如果prec 为-1，则代表使用最少数量的、但又必需的数字来表示f。




isPrint()

bool:=isPrint(rune) 返回一个字符串是否是可打印的，r必须是字母(广义)、数字、标点、符号、ASCII空格

CanBcakquote()
bool:=CanBackquote(str)
   返回字符串是否可以不被修改的表示为一个单行的、没有空格和tab之外控制字符的反引号字符串









