unrecognized import path “golang.org/x/crypto/blake2b” (https fetch: Get https://golang.org/x/crypto/blake2b?go-get=1: dial tcp 216.239.37.1:443:



golang 在 github 上建立了一个镜像库，下载github上的镜像库放入GOPATH下即可

mkdir -p $GOPATH/src/golang.org/x
cd $GOPATH/src/golang.org/x
git clone https://github.com/golang/sync.git
git clone https://github.com/golang/crypto.git
git clone https://github.com/golang/sys.git



随后执行 go get 即可

go get github.com/lxn/walk


创建清单  name.manifest 
<start

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
    <assemblyIdentity version="1.0.0.0" processorArchitecture="*" name="SomeFunkyNameHere" type="win32"/>
    <dependency>
        <dependentAssembly>
            <assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*"/>
        </dependentAssembly>
    </dependency>
    <application xmlns="urn:schemas-microsoft-com:asm.v3">
        <windowsSettings>
            <dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2, PerMonitor</dpiAwareness>
            <dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">True</dpiAware>
        </windowsSettings>
    </application>
</assembly>



end>

执行 rsrc -manifest name.manifest -o rsrc.syso
或者将name.manifest 重命名为name.exe.manifest


执行 go build 

要摆脱cmd窗口，请运行

go build -ldflags="-H windowsgui"




**********************************************************
import (
	"github.com/lxn/walk"
	. "github.com/lxn/walk/declarative"
	"strings"
)

func main() {
	// 声明两个文本编辑控件 textedit   用于接受用户输入、输出
	var inTE, outTE *walk.TextEdit
	//  创建一个窗口对象并运行
	MainWindow{
		// 窗口标题
		Title: "SCREAMO",
		// 最下尺寸
		MinSize: Size{600, 400},
		// 定义全局排序方式  纵向配列  HBox为横向排列
		Layout: VBox{},
		//  VBox
		Children: []Widget{
			//水平分割器  内有两个水平排列的textedit
			HSplitter{
				Children: []Widget{
				        // 文本编辑控件
					//      AssignTo  绑定到inTE地址
·					TextEdit{AssignTo: &inTE},
					TextEdit{AssignTo: &outTE, ReadOnly: true},
				},
			},
			PushButton{
				Text: "SCREAM",
				// 监听函数
				OnClicked: func() {
                    //  设置输出控件的文本
					outTE.SetText(
						 //  字符转大写
						strings.ToUpper(
							// 获取输入控件上的文本
							inTE.Text()))
				},
			},
		},
	}.Run()
}

*********************************************************
常用控件


