日志服务
log包定义了Logger类型，该类型提供了一些格式化输出的方法
本包也提供了一个预定义的“标准”logger，可以通过调用函数Print系列(Print|Printf|Println）、Fatal系列（Fatal|Fatalf|Fatalln）、和Panic系列（Panic|Panicf|Panicln）来使用，比自行创建一个logger对象更容易使用。

eg：
log.Println("这是一条很普通的日志。")
    v := "很普通的"
    log.Printf("这是一条%s日志。\n", v)
    log.Fatalln("这是一条会触发fatal的日志。")
    log.Panicln("这是一条会触发panic的日志。")


logger会打印每条日志信息的日期、时间，默认输出到系统的标准错误。Fatal系列函数会在写入日志信息后调用os.Exit(1)。Panic系列函数会在写入日志信息后panic。

-------------------------------------
配置logger

默认情况下logger只会提供日志的时间信息, 要得到更多信息，就需需要配置logger。


log标准库中的Flags函数会返回标准logger的输出配置，而SetFlags函数用来设置标准logger的输出配置。
func Flags() int
func SetFlags(flag int)

flag选项
const{
   // 控制日志输出的信息，不能控制输出的顺序和格式
   //  输出的日志在每一项后会有一个冒号分开,
   //例如2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
  
Ldate         = 1 << iota     // 日期：2009/01/23
    Ltime                         // 时间：01:23:23
    Lmicroseconds                 // 微秒级别的时间：01:23:23.123123（用于增强Ltime位）
    Llongfile                     // 文件全路径名+行号： /a/b/c/d.go:23
    Lshortfile                    // 文件名+行号：d.go:23（会覆盖掉Llongfile）
    LUTC                          // 使用UTC时间
    LstdFlags     = Ldate | Ltime // 标准logger的初始值

}


eg：
 log.SetFlags(log.Ldate|log.Llongfile|log.Lshortfile)
    log.Println("这是输出的部分日志")


---------------------------------------------------------
配置日志前缀：
 func Prefix() string
    func SetPrefix(prefix string)

eg：
 log.SetPrefix("[pprof]")
    log.Println("这是一条很普通的日志。")

日志信息添加指定的前缀，方便之后对日志信息进行检索和处理。




--------------------------------------------------------------------
配置日志输出位置：
SetOutput（w io.Writer）
    设置标准logger的输出目的地,默认是标准错误输出。


如要使用标准的logger，通常把配置操作写道init函数中：

func init() {
    logFile, err := os.OpenFile("./xx.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
    if err != nil {
        fmt.Println("open log file failed, err:", err)
        return
    }
    log.SetOutput(logFile)
    log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)
}


--------------------------------------------------------------------
创建logger
log标准库中提供了一个创建新的logger对象得构造函数New

func New(out io.Writer, prefix string, flag int) *Logger

arg： 
    out  设置日志写入的目的地
    prefix  添加生成的每一条日志前缀,
    flag  定义日志的属性(时间、文件等)





